
anime({targets: '#house polygon, #house path, #tubes polygon, #tubes path, #tubesStend polygon,#width1, #width2, #line3, #line1, #orangeLine, #crane path, #crane polygon',strokeDashoffset: [anime.setDashoffset, 0],duration: 10,direction: 'reverse'});
anime({targets: '#buildDot1 ellipse, #buildDot2 ellipse, #dot3 ellipse, #dot1 ellipse, #orangeDot_1_ ellipse',rx:0,ry:0,duration: 10});
anime({targets: '#step2circle, #step3circle, #circle1, #circle2, #orangeCircle', r: 0,duration: 10});
anime({targets: '#step2right', opacity: 0, translateX: 44, translateY: 44, duration: 10});
anime({targets: '#step2left', opacity: 0, translateX: -44, translateY: -44, duration: 10});
anime({targets: '#beat', opacity: 0, translateX: -57, translateY: 34, duration: 10});
anime({targets: '#car', opacity: 0, translateX: 35, translateY: -19, duration: 10});
anime({targets: '#d1, #d2, #d3', opacity: 0, translateX: -15, translateY: -15, duration: 10});
anime({targets: '#tubesLine path', opacity: 0, translateY: -30, duration: 10});
anime({targets: '#zab path', opacity: 0, translateY: 30, duration: 10});
anime({targets: '#server, #server2', opacity: 0, translateY: -55, duration: 10});
anime({targets: '#step3right', opacity: 0, translateX: 53, translateY: -53, duration: 10});
anime({targets: '#man', opacity: 0, translateX: -53, translateY: 53, duration: 10});
anime({targets: '#b1, #b2, #b3, #circles', scale: 0, duration: 10});
anime({targets: '#road, #roadDots, #yellowpath', opacity: 0, duration: 10});

$(window).on('load', function(){ 
	
	var basicTimeline = anime.timeline();

	basicTimeline
	.add({
		targets: '.sensor svg',
		opacity: 1,
		duration: 10,
		delay: 1000,		
	})
	.add({
		targets: '#b1',
		scale: 1,
		duration: 1000,	
	})
	.add({
		targets: '#b2',
		scale: 1,
		duration: 1000,	
		offset: '-=700'
	})	
	.add({
		targets: '#b3',
		scale: 1,
		duration: 1000,	
		offset: '-=700'
	})	
	
	.add({
		targets: '#road, #roadDots',
		opacity: 1,
		duration: 1000,	
		offset: '-=700'
	})
	.add({
		targets: '#car',
		translateX: 0,
		translateY: 0,
		opacity: 1,
		duration: 1000,	
		offset: '-=700'
	})
	.add({
		targets: '#zab path',
		translateY: 0,
		opacity: 1,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#tubes polygon, #tubes path, #tubesStend polygon',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 1000,	
		offset: '-=700',
		complete: function(anim) {
			anime({
				targets: '#tubesLine path',
				translateY: 0,
				opacity: 1,
				duration: 1000,
				delay: function(el, i, l) {
					return i * 20;
				}
			});
		  }
	})
	.add({
		targets: '#yellowpath',
		opacity: 1,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#d1',
		translateY: 0,
		translateX: 0,
		opacity: 1,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#dot3 ellipse',
		rx: 3.76,
		ry: 3.76,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#line3',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 1000,	
		offset: '-=700'
	})
	.add({
		targets: '#orangeDot_1_ ellipse',
		rx: 3.76,
		ry: 3.76,
		duration: 1000,
		offset: '-=1200'
	})
	.add({
		targets: '#orangeLine',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 1000,	
		offset: '-=1000'
	})
	.add({
		targets: '#orangeCircle',
		r: 39.572,
		duration: 1000,
		offset: '-=500'
	})
	.add({
		targets: '#beat',
		translateY: 0,
		translateX: 0,
		opacity: 1,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#circle2',
		r: 66.682,
		duration: 1000,
		offset: '-=500'
	})
	.add({
		targets: '#server2',
		opacity: 1,
		translateY: 0,
		duration: 1000,
		offset: '-=500'
	})
	.add({
		targets: '#dot1 ellipse',
		rx: 3.76,
		ry: 3.76,
		duration: 1000,
		offset: '-=700'
	})
	.add({
		targets: '#line1',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 1000,	
		offset: '-=700'
	})
	.add({
		targets: '#circle1',
		r: 39.572,
		duration: 1000,
		offset: '-=500'
	})
	.add({
		targets: '#server',
		opacity: 1,
		translateY: 0,
		duration: 1000,
		offset: '-=500'
	})
	.add({
		targets: '#d2',
		translateY: 0,
		translateX: 0,
		opacity: 1,
		duration: 1000,
		offset: '-=3500'
	})
	.add({
		targets: '#d3',
		translateY: 0,
		translateX: 0,
		opacity: 1,
		duration: 1000,
		offset: '-=2800'
	})
	.add({
		targets: '#width1, #width2',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 1000,	
		offset: '-=2100'
	})
	


	.add({
		targets: '#house polygon, #house path',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 2000,
		offset: '-=4000'
	})
	.add({
		targets: '#buildDot1 ellipse, #buildDot2 ellipse',
		rx: 3.76,
		ry: 3.76,
		duration: 1000,
		offset: '-=3500'
	})
	.add({
		targets: '#buildLine1, #buildLine2',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 600,
		direction: 'reverse',
		offset: '-=2500'
	})
	.add({
		targets: '#step2circle, #step3circle',
		r: 66.682,
		duration: 1000,
		offset: '-=2000'
	})
	.add({
		targets: '#step2right, #step2left, #step3right, #man',
		opacity: 1,
		translateX: 0,
		translateY: 0,
		duration: 1000,
		offset: '-=1000'
	})
	.add({
		targets: '#circles',
		scale: 1,
		duration: 1000,
		offset: '-=700',
  		loop: true 
	})
	.add({
		targets: '#crane path, #crane polygon',
		strokeDashoffset: [anime.setDashoffset, 0],
		easing: 'easeInOutSine',
		duration: 600,
		direction: 'reverse',
		offset: '-=700',
		complete: function(anim) {
			anime({
				targets: '#circles',
				scale: 1.2,
				duration: 2000,
				direction: 'alternate',
				loop: true 
			});
		  }
	})

	

	var seekProgressEl = document.querySelector('.progress');

	seekProgressEl.addEventListener('input', function() { 
		basicTimeline.seek(basicTimeline.duration * (seekProgressEl.value / 100));
	});

	['input','change'].forEach(function(evt) {
	seekProgressEl.addEventListener(evt, function() { 
		basicTimeline.seek(basicTimeline.duration * (seekProgressEl.value / 100));
	});
	});

});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
